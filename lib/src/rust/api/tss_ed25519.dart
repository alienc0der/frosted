// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<KeygenResult> keygen(
        {required int maxSigners, required int minSigners, dynamic hint}) =>
    RustLib.instance.api
        .keygen(maxSigners: maxSigners, minSigners: minSigners, hint: hint);

Future<String> keysign({required String serializedRequest, dynamic hint}) =>
    RustLib.instance.api
        .keysign(serializedRequest: serializedRequest, hint: hint);

Future<bool> verifySignature({required VerifyRequest request, dynamic hint}) =>
    RustLib.instance.api.verifySignature(request: request, hint: hint);

class KeyShard {
  final Uint8List identifier;
  final Uint8List secretShare;

  const KeyShard({
    required this.identifier,
    required this.secretShare,
  });

  @override
  int get hashCode => identifier.hashCode ^ secretShare.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is KeyShard &&
          runtimeType == other.runtimeType &&
          identifier == other.identifier &&
          secretShare == other.secretShare;
}

class KeygenResult {
  final List<KeyShard> keyShards;
  final Uint8List publicKeyPackage;
  final Uint8List groupPublicKey;

  const KeygenResult({
    required this.keyShards,
    required this.publicKeyPackage,
    required this.groupPublicKey,
  });

  @override
  int get hashCode =>
      keyShards.hashCode ^ publicKeyPackage.hashCode ^ groupPublicKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is KeygenResult &&
          runtimeType == other.runtimeType &&
          keyShards == other.keyShards &&
          publicKeyPackage == other.publicKeyPackage &&
          groupPublicKey == other.groupPublicKey;
}

class VerifyRequest {
  final String message;
  final String signatureBase64;
  final Uint8List publicKeyPackage;

  const VerifyRequest({
    required this.message,
    required this.signatureBase64,
    required this.publicKeyPackage,
  });

  @override
  int get hashCode =>
      message.hashCode ^ signatureBase64.hashCode ^ publicKeyPackage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is VerifyRequest &&
          runtimeType == other.runtimeType &&
          message == other.message &&
          signatureBase64 == other.signatureBase64 &&
          publicKeyPackage == other.publicKeyPackage;
}
